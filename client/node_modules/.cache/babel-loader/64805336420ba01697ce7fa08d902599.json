{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport UserActionTypes from '../user/user.types';\nimport CartActionTypes from './cart.types';\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { selectCartItems } from './cart.selectors';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase(_ref) {\n  let {\n    payload: user\n  } = _ref;\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.ON_SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART]);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Akinbulejo Samson/crown/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","UserActionTypes","CartActionTypes","selectCurrentUser","selectCartItems","clearCart","setCartFromFirebase","getUserCartRef","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","ON_SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMT,GAAG,CAACM,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUI,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACG,iBAAD,CAAhC;;AAEA,MAAIO,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMJ,cAAc,CAACG,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACI,eAAD,CAA9B;AACA,YAAMO,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,OAAmD;AAAA,MAAnB;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAmB;AACxD,QAAMT,OAAO,GAAG,MAAMJ,cAAc,CAACa,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACO,mBAAmB,CAACe,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACD;AAED,OAAO,UAAUW,gBAAV,GAA6B;AAClC,QAAM1B,UAAU,CAACG,eAAe,CAACwB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC9B,QAAM5B,UAAU,CAACG,eAAe,CAAC0B,kBAAjB,EAAqCT,qBAArC,CAAhB;AACD;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC9B,QAAM9B,UAAU,CAAC,CACfI,eAAe,CAAC2B,QADD,EAEf3B,eAAe,CAAC4B,WAFD,EAGf5B,eAAe,CAAC6B,oBAHD,CAAD,CAAhB;AAKD;AAED,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC2B,gBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put, select } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from '../user/user.types';\r\nimport CartActionTypes from './cart.types';\r\nimport { selectCurrentUser } from '../user/user.selectors';\r\nimport { selectCartItems } from './cart.selectors';\r\nimport { clearCart, setCartFromFirebase } from './cart.actions';\r\n\r\nimport { getUserCartRef } from '../../firebase/firebase.utils';\r\n\r\nexport function* clearCartOnSignOut() {\r\n  yield put(clearCart());\r\n}\r\n\r\nexport function* updateCartInFirebase() {\r\n  const currentUser = yield select(selectCurrentUser);\r\n\r\n  if (currentUser) {\r\n    try {\r\n      const cartRef = yield getUserCartRef(currentUser.id);\r\n      const cartItems = yield select(selectCartItems);\r\n      yield cartRef.update({ cartItems });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport function* checkCartFromFirebase({ payload: user }) {\r\n  const cartRef = yield getUserCartRef(user.id);\r\n  const cartSnapshot = yield cartRef.get();\r\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems))\r\n}\r\n\r\nexport function* onSignOutSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut)\r\n}\r\n\r\nexport function* onUserSignIn() {\r\n  yield takeLatest(UserActionTypes.ON_SIGN_IN_SUCCESS, checkCartFromFirebase);\r\n}\r\n\r\nexport function* onCartChange() {\r\n  yield takeLatest([\r\n    CartActionTypes.ADD_ITEM,\r\n    CartActionTypes.REMOVE_ITEM,\r\n    CartActionTypes.CLEAR_ITEM_FROM_CART\r\n  ], )\r\n}\r\n\r\nexport function* cartSagas() {\r\n  yield(all([call(onSignOutSuccess)]))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}